{"repo": "smdabdoub/phylotoast", "path": "phylotoast/biom_calc.py", "func_name": "MRA", "original_string": "def MRA(biomf, sampleIDs=None, transform=None):\n    \"\"\"\n    Calculate the mean relative abundance percentage.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :type sampleIDs: list\n    :param sampleIDs: A list of sample id's from BIOM format OTU table.\n\n    :param transform: Mathematical function which is used to transform smax to another\n                      format. By default, the function has been set to None.\n\n    :rtype: dict\n    :return: A dictionary keyed on OTUID's and their mean relative abundance for a given\n             number of sampleIDs.\n    \"\"\"\n    ra = relative_abundance(biomf, sampleIDs)\n    if transform is not None:\n        ra = {sample: {otuID: transform(abd) for otuID, abd in ra[sample].items()}\n              for sample in ra.keys()}\n    otuIDs = biomf.ids(axis=\"observation\")\n    return mean_otu_pct_abundance(ra, otuIDs)", "language": "python", "code": "def MRA(biomf, sampleIDs=None, transform=None):\n    \"\"\"\n    Calculate the mean relative abundance percentage.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :type sampleIDs: list\n    :param sampleIDs: A list of sample id's from BIOM format OTU table.\n\n    :param transform: Mathematical function which is used to transform smax to another\n                      format. By default, the function has been set to None.\n\n    :rtype: dict\n    :return: A dictionary keyed on OTUID's and their mean relative abundance for a given\n             number of sampleIDs.\n    \"\"\"\n    ra = relative_abundance(biomf, sampleIDs)\n    if transform is not None:\n        ra = {sample: {otuID: transform(abd) for otuID, abd in ra[sample].items()}\n              for sample in ra.keys()}\n    otuIDs = biomf.ids(axis=\"observation\")\n    return mean_otu_pct_abundance(ra, otuIDs)", "code_tokens": ["def", "MRA", "(", "biomf", ",", "sampleIDs", "=", "None", ",", "transform", "=", "None", ")", ":", "ra", "=", "relative_abundance", "(", "biomf", ",", "sampleIDs", ")", "if", "transform", "is", "not", "None", ":", "ra", "=", "{", "sample", ":", "{", "otuID", ":", "transform", "(", "abd", ")", "for", "otuID", ",", "abd", "in", "ra", "[", "sample", "]", ".", "items", "(", ")", "}", "for", "sample", "in", "ra", ".", "keys", "(", ")", "}", "otuIDs", "=", "biomf", ".", "ids", "(", "axis", "=", "\"observation\"", ")", "return", "mean_otu_pct_abundance", "(", "ra", ",", "otuIDs", ")"], "docstring": "Calculate the mean relative abundance percentage.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :type sampleIDs: list\n    :param sampleIDs: A list of sample id's from BIOM format OTU table.\n\n    :param transform: Mathematical function which is used to transform smax to another\n                      format. By default, the function has been set to None.\n\n    :rtype: dict\n    :return: A dictionary keyed on OTUID's and their mean relative abundance for a given\n             number of sampleIDs.", "docstring_tokens": ["Calculate", "the", "mean", "relative", "abundance", "percentage", "."], "sha": "0b74ef171e6a84761710548501dfac71285a58a3", "url": "https://github.com/smdabdoub/phylotoast/blob/0b74ef171e6a84761710548501dfac71285a58a3/phylotoast/biom_calc.py#L70-L92", "partition": "train"}
{"repo": "smdabdoub/phylotoast", "path": "phylotoast/biom_calc.py", "func_name": "raw_abundance", "original_string": "def raw_abundance(biomf, sampleIDs=None, sample_abd=True):\n    \"\"\"\n    Calculate the total number of sequences in each OTU or SampleID.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :type sampleIDs: List\n    :param sampleIDs: A list of column id's from BIOM format OTU table. By default, the\n                      list has been set to None.\n\n    :type sample_abd: Boolean\n    :param sample_abd: A boolean operator to provide output for OTUID's or SampleID's. By\n                       default, the output will be provided for SampleID's.\n\n    :rtype: dict\n    :return: Returns a dictionary keyed on either OTUID's or SampleIDs and their\n             respective abundance as values.\n    \"\"\"\n    results = defaultdict(int)\n    if sampleIDs is None:\n        sampleIDs = biomf.ids()\n    else:\n        try:\n            for sid in sampleIDs:\n                assert sid in biomf.ids()\n        except AssertionError:\n            raise ValueError(\n                \"\\nError while calculating raw total abundances: The sampleIDs provided \"\n                \"do not match the sampleIDs in biom file. Please double check the \"\n                \"sampleIDs provided.\\n\")\n    otuIDs = biomf.ids(axis=\"observation\")\n\n    for sampleID in sampleIDs:\n        for otuID in otuIDs:\n            abd = biomf.get_value_by_ids(otuID, sampleID)\n            if sample_abd:\n                results[sampleID] += abd\n            else:\n                results[otuID] += abd\n    return results", "language": "python", "code": "def raw_abundance(biomf, sampleIDs=None, sample_abd=True):\n    \"\"\"\n    Calculate the total number of sequences in each OTU or SampleID.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :type sampleIDs: List\n    :param sampleIDs: A list of column id's from BIOM format OTU table. By default, the\n                      list has been set to None.\n\n    :type sample_abd: Boolean\n    :param sample_abd: A boolean operator to provide output for OTUID's or SampleID's. By\n                       default, the output will be provided for SampleID's.\n\n    :rtype: dict\n    :return: Returns a dictionary keyed on either OTUID's or SampleIDs and their\n             respective abundance as values.\n    \"\"\"\n    results = defaultdict(int)\n    if sampleIDs is None:\n        sampleIDs = biomf.ids()\n    else:\n        try:\n            for sid in sampleIDs:\n                assert sid in biomf.ids()\n        except AssertionError:\n            raise ValueError(\n                \"\\nError while calculating raw total abundances: The sampleIDs provided \"\n                \"do not match the sampleIDs in biom file. Please double check the \"\n                \"sampleIDs provided.\\n\")\n    otuIDs = biomf.ids(axis=\"observation\")\n\n    for sampleID in sampleIDs:\n        for otuID in otuIDs:\n            abd = biomf.get_value_by_ids(otuID, sampleID)\n            if sample_abd:\n                results[sampleID] += abd\n            else:\n                results[otuID] += abd\n    return results", "code_tokens": ["def", "raw_abundance", "(", "biomf", ",", "sampleIDs", "=", "None", ",", "sample_abd", "=", "True", ")", ":", "results", "=", "defaultdict", "(", "int", ")", "if", "sampleIDs", "is", "None", ":", "sampleIDs", "=", "biomf", ".", "ids", "(", ")", "else", ":", "try", ":", "for", "sid", "in", "sampleIDs", ":", "assert", "sid", "in", "biomf", ".", "ids", "(", ")", "except", "AssertionError", ":", "raise", "ValueError", "(", "\"\\nError while calculating raw total abundances: The sampleIDs provided \"", "\"do not match the sampleIDs in biom file. Please double check the \"", "\"sampleIDs provided.\\n\"", ")", "otuIDs", "=", "biomf", ".", "ids", "(", "axis", "=", "\"observation\"", ")", "for", "sampleID", "in", "sampleIDs", ":", "for", "otuID", "in", "otuIDs", ":", "abd", "=", "biomf", ".", "get_value_by_ids", "(", "otuID", ",", "sampleID", ")", "if", "sample_abd", ":", "results", "[", "sampleID", "]", "+=", "abd", "else", ":", "results", "[", "otuID", "]", "+=", "abd", "return", "results"], "docstring": "Calculate the total number of sequences in each OTU or SampleID.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :type sampleIDs: List\n    :param sampleIDs: A list of column id's from BIOM format OTU table. By default, the\n                      list has been set to None.\n\n    :type sample_abd: Boolean\n    :param sample_abd: A boolean operator to provide output for OTUID's or SampleID's. By\n                       default, the output will be provided for SampleID's.\n\n    :rtype: dict\n    :return: Returns a dictionary keyed on either OTUID's or SampleIDs and their\n             respective abundance as values.", "docstring_tokens": ["Calculate", "the", "total", "number", "of", "sequences", "in", "each", "OTU", "or", "SampleID", "."], "sha": "0b74ef171e6a84761710548501dfac71285a58a3", "url": "https://github.com/smdabdoub/phylotoast/blob/0b74ef171e6a84761710548501dfac71285a58a3/phylotoast/biom_calc.py#L95-L135", "partition": "train"}
{"repo": "smdabdoub/phylotoast", "path": "phylotoast/biom_calc.py", "func_name": "transform_raw_abundance", "original_string": "def transform_raw_abundance(biomf, fn=math.log10, sampleIDs=None, sample_abd=True):\n    \"\"\"\n    Function to transform the total abundance calculation for each sample ID to another\n    format based on user given transformation function.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :param fn: Mathematical function which is used to transform smax to another format.\n               By default, the function has been given as base 10 logarithm.\n\n    :rtype: dict\n    :return: Returns a dictionary similar to output of raw_abundance function but with\n             the abundance values modified by the mathematical operation. By default, the\n             operation performed on the abundances is base 10 logarithm.\n    \"\"\"\n    totals = raw_abundance(biomf, sampleIDs, sample_abd)\n    return {sid: fn(abd) for sid, abd in totals.items()}", "language": "python", "code": "def transform_raw_abundance(biomf, fn=math.log10, sampleIDs=None, sample_abd=True):\n    \"\"\"\n    Function to transform the total abundance calculation for each sample ID to another\n    format based on user given transformation function.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :param fn: Mathematical function which is used to transform smax to another format.\n               By default, the function has been given as base 10 logarithm.\n\n    :rtype: dict\n    :return: Returns a dictionary similar to output of raw_abundance function but with\n             the abundance values modified by the mathematical operation. By default, the\n             operation performed on the abundances is base 10 logarithm.\n    \"\"\"\n    totals = raw_abundance(biomf, sampleIDs, sample_abd)\n    return {sid: fn(abd) for sid, abd in totals.items()}", "code_tokens": ["def", "transform_raw_abundance", "(", "biomf", ",", "fn", "=", "math", ".", "log10", ",", "sampleIDs", "=", "None", ",", "sample_abd", "=", "True", ")", ":", "totals", "=", "raw_abundance", "(", "biomf", ",", "sampleIDs", ",", "sample_abd", ")", "return", "{", "sid", ":", "fn", "(", "abd", ")", "for", "sid", ",", "abd", "in", "totals", ".", "items", "(", ")", "}"], "docstring": "Function to transform the total abundance calculation for each sample ID to another\n    format based on user given transformation function.\n\n    :type biomf: A BIOM file.\n    :param biomf: OTU table format.\n\n    :param fn: Mathematical function which is used to transform smax to another format.\n               By default, the function has been given as base 10 logarithm.\n\n    :rtype: dict\n    :return: Returns a dictionary similar to output of raw_abundance function but with\n             the abundance values modified by the mathematical operation. By default, the\n             operation performed on the abundances is base 10 logarithm.", "docstring_tokens": ["Function", "to", "transform", "the", "total", "abundance", "calculation", "for", "each", "sample", "ID", "to", "another", "format", "based", "on", "user", "given", "transformation", "function", "."], "sha": "0b74ef171e6a84761710548501dfac71285a58a3", "url": "https://github.com/smdabdoub/phylotoast/blob/0b74ef171e6a84761710548501dfac71285a58a3/phylotoast/biom_calc.py#L138-L155", "partition": "train"}
{"repo": "smdabdoub/phylotoast", "path": "phylotoast/biom_calc.py", "func_name": "arcsine_sqrt_transform", "original_string": "def arcsine_sqrt_transform(rel_abd):\n    \"\"\"\n    Takes the proportion data from relative_abundance() and applies the\n    variance stabilizing arcsine square root transformation:\n\n    X = sin^{-1} \\sqrt p\n    \"\"\"\n    arcsint = lambda p: math.asin(math.sqrt(p))\n    return {col_id: {row_id: arcsint(rel_abd[col_id][row_id])\n                     for row_id in rel_abd[col_id]} for col_id in rel_abd}", "language": "python", "code": "def arcsine_sqrt_transform(rel_abd):\n    \"\"\"\n    Takes the proportion data from relative_abundance() and applies the\n    variance stabilizing arcsine square root transformation:\n\n    X = sin^{-1} \\sqrt p\n    \"\"\"\n    arcsint = lambda p: math.asin(math.sqrt(p))\n    return {col_id: {row_id: arcsint(rel_abd[col_id][row_id])\n                     for row_id in rel_abd[col_id]} for col_id in rel_abd}", "code_tokens": ["def", "arcsine_sqrt_transform", "(", "rel_abd", ")", ":", "arcsint", "=", "lambda", "p", ":", "math", ".", "asin", "(", "math", ".", "sqrt", "(", "p", ")", ")", "return", "{", "col_id", ":", "{", "row_id", ":", "arcsint", "(", "rel_abd", "[", "col_id", "]", "[", "row_id", "]", ")", "for", "row_id", "in", "rel_abd", "[", "col_id", "]", "}", "for", "col_id", "in", "rel_abd", "}"], "docstring": "Takes the proportion data from relative_abundance() and applies the\n    variance stabilizing arcsine square root transformation:\n\n    X = sin^{-1} \\sqrt p", "docstring_tokens": ["Takes", "the", "proportion", "data", "from", "relative_abundance", "()", "and", "applies", "the", "variance", "stabilizing", "arcsine", "square", "root", "transformation", ":"], "sha": "0b74ef171e6a84761710548501dfac71285a58a3", "url": "https://github.com/smdabdoub/phylotoast/blob/0b74ef171e6a84761710548501dfac71285a58a3/phylotoast/biom_calc.py#L158-L167", "partition": "train"}
{"repo": "christophertbrown/bioscripts", "path": "ctbBio/lookup-word.py", "func_name": "f2lookup", "original_string": "def f2lookup(f, lookup):\n    \"\"\"\n    find and replace elements in lookup within file\n    \"\"\"\n    lookup = {i: r for i, r in [l.strip().split('\\t')[0:2] for l in lookup]}\n    for line in f:\n        line = line.strip().split()\n        for i, w in enumerate(line):\n            if w in lookup:\n                line[i] = lookup[w]\n        yield ' '.join(line)", "language": "python", "code": "def f2lookup(f, lookup):\n    \"\"\"\n    find and replace elements in lookup within file\n    \"\"\"\n    lookup = {i: r for i, r in [l.strip().split('\\t')[0:2] for l in lookup]}\n    for line in f:\n        line = line.strip().split()\n        for i, w in enumerate(line):\n            if w in lookup:\n                line[i] = lookup[w]\n        yield ' '.join(line)", "code_tokens": ["def", "f2lookup", "(", "f", ",", "lookup", ")", ":", "lookup", "=", "{", "i", ":", "r", "for", "i", ",", "r", "in", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "[", "0", ":", "2", "]", "for", "l", "in", "lookup", "]", "}", "for", "line", "in", "f", ":", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "i", ",", "w", "in", "enumerate", "(", "line", ")", ":", "if", "w", "in", "lookup", ":", "line", "[", "i", "]", "=", "lookup", "[", "w", "]", "yield", "' '", ".", "join", "(", "line", ")"], "docstring": "find and replace elements in lookup within file", "docstring_tokens": ["find", "and", "replace", "elements", "in", "lookup", "within", "file"], "sha": "83b2566b3a5745437ec651cd6cafddd056846240", "url": "https://github.com/christophertbrown/bioscripts/blob/83b2566b3a5745437ec651cd6cafddd056846240/ctbBio/lookup-word.py#L10-L20", "partition": "train"}